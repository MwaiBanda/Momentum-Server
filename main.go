package main

import (
	"Momentum/prisma/db"
	"context"
	"encoding/json"
	"fmt"
	"log"
	"os"

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/swagger"
	// docs are generated by Swag CLI, you have to import them.
	// replace with your own docs folder, usually "github.com/username/reponame/docs"
	_ "Momentum/docs"
	_ "Momentum/httputil"
	_ "Momentum/model"
)

type Post struct {
	Id        string `json:"id"`
	CreatedAt string `json:"createdAt"`
	UpdatedAt string `json:"updatedAt"`
	Title     string `json:"title"`
	Published bool   `json:"published"`
	desc      string `json:"desc"`
}

// @title Momentum API
// @version 1.0
// @description This is a backend service to process payments and provide some CRUD functionality
// @termsOfService http://swagger.io/terms/
// @contact.name Mwai Banda
// @contact.email mwai.developer@gmail.com
// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html
// @host services.momentumchurch.dev
// @BasePath /
func main() {
	app := fiber.New()
	client := db.NewClient()
	if err := client.Prisma.Connect(); err != nil {
		fmt.Println(err)
	}

	defer func() {
		if err := client.Prisma.Disconnect(); err != nil {
			panic(err)
		}
	}()

	ctx := context.Background()
	port := os.Getenv("PORT")
	if port == "" {
		port = "8080"
	}

	app.Get("/hello", func(context *fiber.Ctx) error {
		demo := Post{Title: "Hello World"}
		_, err := json.Marshal(demo)
		if err != nil {
			log.Fatal(err.Error())
		}
		return context.JSON(demo)
	})

	app.Get("/posts", func(context *fiber.Ctx) error {
		var posts []Post
		post, err := client.Post.FindMany().Exec(ctx)
		if err != nil {
			fmt.Println(err)
		}

		result, _ := json.MarshalIndent(post, "", "  ")
		if err := json.Unmarshal(result, &posts); err != nil {
			fmt.Println(err)
		}

		return context.JSON(posts)
	})
	app.Get("/*", swagger.HandlerDefault) // default

	app.Get("/*", swagger.New(swagger.Config{ // custom
		URL:          "http://example.com/doc.json",
		DeepLinking:  false,
		DocExpansion: "none",
	}))

	log.Fatal(app.Listen(":" + port))
}
