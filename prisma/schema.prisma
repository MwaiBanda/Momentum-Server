generator db {
  provider        = "go run github.com/steebchen/prisma-client-go"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Message {
  id        String    @id
  thumbnail String
  series    String
  title     String
  preacher  String
  date      String
  createdOn DateTime  @default(now())
  published Boolean   @default(false)
  hasOrder  Boolean   @default(false)
  passages  Passage[]
}

model Passage {
  id        String    @id @default(cuid())
  header    String?
  verse     String?
  message   String?
  messageId String?
  createdOn DateTime? @default(now())
  order     Int?      @default(0)
  notes     Note[]
  parent    Message?  @relation(fields: [messageId], references: [id])

  @@index([messageId])
}

model Service {
  id        String   @id @default(cuid())
  name      String
  type      String
  Image     String
  createdOn DateTime @default(now())
}

model Note {
  id        String   @id @default(cuid())
  content   String
  createdOn DateTime @default(now())
  updatedOn DateTime @default(now())
  userId    String?
  passageId String?
  passage   Passage? @relation(fields: [passageId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId, passageId])
}

model User {
  id                 String            @id
  email              String
  fullname           String
  phone              String
  createdOn          DateTime          @default(now())
  organisedMeal      Meal[]
  mealParticipations MealParticipant[]
  notes              Note[]
  transactions       Transaction[]
  volunteeredMeals   VolunteeredMeal[]
}

model Meal {
  id              String            @id @default(cuid())
  reason          String
  email           String
  phone           String
  city            String
  numOfAdults     Int
  numberOfKids    Int
  street          String
  preferredTime   String
  favourites      String
  leastFavourites String
  allergies       String
  instructions    String
  userId          String?
  recipient       String
  createdOn       DateTime          @default(now())
  user            User?             @relation(fields: [userId], references: [id])
  participants    MealParticipant[]
  meals           VolunteeredMeal[]

  @@index([userId])
}

model VolunteeredMeal {
  id          String        @id @default(cuid())
  description String
  notes       String
  userId      String?
  mealId      String?
  createdOn   DateTime      @default(now())
  date        String        @default("")
  updates     MealUpdates[]
  meal        Meal?         @relation(fields: [mealId], references: [id])
  user        User?         @relation(fields: [userId], references: [id])

  @@index([userId, mealId])
}

model MealUpdates {
  id        String          @id @default(cuid())
  message   String
  mealId    String
  createdOn DateTime        @default(now())
  meal      VolunteeredMeal @relation(fields: [mealId], references: [id])

  @@index([mealId])
}

model MealParticipant {
  userId     String
  mealId     String
  assignedAt DateTime @default(now())
  id         String   @default(cuid())
  meal       Meal     @relation(fields: [mealId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@id([id, userId, mealId])
}

model Transaction {
  id          String   @id @default(cuid())
  amount      Int
  date        String
  createdOn   DateTime @default(now())
  userId      String
  Description String
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
}
