basePath: /
definitions:
  model.Attribute:
    properties:
      all_day_event:
        type: boolean
      ends_at:
        type: string
      image_url:
        type: string
      name:
        type: string
      open_graph_description:
        type: string
      recurrence_description:
        type: string
      recurring:
        type: boolean
      starts_at:
        type: string
    type: object
  model.Event:
    properties:
      attributes:
        $ref: '#/definitions/model.Attribute'
      id:
        type: string
    type: object
  model.EventReponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Event'
        type: array
    type: object
  model.HTTPError:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: status bad request
        type: string
    type: object
  model.MealRequest:
    properties:
      allergies:
        type: string
      city:
        type: string
      email:
        type: string
      favourites:
        type: string
      id:
        type: string
      instructions:
        type: string
      least_favourites:
        type: string
      meals:
        items:
          $ref: '#/definitions/model.MealVolunteeredRequest'
        type: array
      num_of_adults:
        type: integer
      number_of_kids:
        type: integer
      phone:
        type: string
      preferred_time:
        type: string
      reason:
        type: string
      recipient:
        type: string
      street:
        type: string
      user_id:
        type: string
    type: object
  model.MealResponse:
    properties:
      allergies:
        type: string
      city:
        type: string
      email:
        type: string
      favourites:
        type: string
      id:
        type: string
      instructions:
        type: string
      least_favourites:
        type: string
      meals:
        items:
          $ref: '#/definitions/model.VolunteeredMeal'
        type: array
      num_of_adults:
        type: integer
      number_of_kids:
        type: integer
      participants:
        items:
          $ref: '#/definitions/model.Participant'
        type: array
      phone:
        type: string
      preferred_time:
        type: string
      reason:
        type: string
      recipient:
        type: string
      street:
        type: string
      user:
        $ref: '#/definitions/model.UserResponse'
    type: object
  model.MealUpdates:
    properties:
      id:
        type: string
      message:
        type: string
    type: object
  model.MealVolunteeredRequest:
    properties:
      date:
        type: string
      description:
        type: string
      meal_id:
        type: string
      notes:
        type: string
      user_id:
        type: string
    type: object
  model.Message:
    properties:
      createdOn:
        type: string
      date:
        type: string
      hasOrder:
        type: boolean
      id:
        type: string
      passages:
        items:
          $ref: '#/definitions/model.PassageResponse'
        type: array
      preacher:
        type: string
      published:
        type: boolean
      series:
        type: string
      thumbnail:
        type: string
      title:
        type: string
    type: object
  model.MessageResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Message'
        type: array
    type: object
  model.Note:
    properties:
      content:
        type: string
      id:
        type: string
      userId:
        type: string
    type: object
  model.NoteRequest:
    properties:
      content:
        type: string
      passageId:
        type: string
      userId:
        type: string
    type: object
  model.Notification:
    properties:
      body:
        type: string
      title:
        type: string
      topic:
        type: string
    type: object
  model.Participant:
    properties:
      id:
        type: string
      user:
        $ref: '#/definitions/model.UserResponse'
    type: object
  model.PassageResponse:
    properties:
      header:
        type: string
      id:
        type: string
      message:
        type: string
      notes:
        items:
          $ref: '#/definitions/model.Note'
        type: array
      order:
        type: integer
      type:
        type: string
      verse:
        type: string
    type: object
  model.PaymentRequest:
    properties:
      amount:
        type: integer
      email:
        type: string
      fullname:
        type: string
      phone:
        type: string
    type: object
  model.PaymentResponse:
    properties:
      customer:
        type: string
      ephemeralKey:
        type: string
      paymentIntent:
        type: string
      publishableKey:
        type: string
    type: object
  model.Sermon:
    properties:
      categories: {}
      date:
        properties:
          carbon:
            type: string
          date:
            type: string
        type: object
      detail_url:
        type: string
      id:
        type: string
      interactions:
        properties:
          likes:
            type: integer
          shares:
            type: integer
        type: object
      interactive_note: {}
      keywords: {}
      media:
        properties:
          audio: {}
          embed: {}
          image: {}
          notes: {}
          video:
            type: string
          video_thumbnail:
            type: string
        type: object
      passages:
        items: {}
        type: array
      preacher:
        type: string
      series:
        properties:
          description: {}
          image: {}
          slug:
            type: string
          title:
            type: string
        type: object
      slug:
        type: string
      summary: {}
      text: {}
      title:
        type: string
    type: object
  model.SermonResponse:
    properties:
      current_page:
        type: integer
      data:
        items:
          $ref: '#/definitions/model.Sermon'
        type: array
      first_page_url:
        type: string
      from:
        type: integer
      last_page:
        type: integer
      last_page_url:
        type: string
      links:
        items:
          properties:
            active:
              type: boolean
            label:
              type: string
            url: {}
          type: object
        type: array
      next_page_url:
        type: string
      path:
        type: string
      per_page:
        type: integer
      prev_page_url: {}
      to:
        type: integer
      total:
        type: string
    type: object
  model.Service:
    properties:
      id:
        type: string
      image:
        type: string
      name:
        type: string
      type:
        type: string
    type: object
  model.ServiceResponse:
    properties:
      id:
        type: string
      image:
        type: string
      name:
        type: string
      services:
        items:
          $ref: '#/definitions/model.VolunteerService'
        type: array
      type:
        type: string
    type: object
  model.TransactionRequest:
    properties:
      amount:
        type: integer
      date:
        type: string
      description:
        type: string
      id:
        type: string
      userId:
        type: string
    type: object
  model.TransactionResponse:
    properties:
      amount:
        type: integer
      createdOn:
        type: string
      date:
        type: string
      description:
        type: string
      id:
        type: string
      user:
        $ref: '#/definitions/model.UserResponse'
    type: object
  model.UserRequest:
    properties:
      email:
        type: string
      fullname:
        type: string
      id:
        type: string
      phone:
        type: string
    type: object
  model.UserResponse:
    properties:
      createdOn:
        type: string
      email:
        type: string
      fullname:
        type: string
      id:
        type: string
      meals:
        items:
          $ref: '#/definitions/model.MealResponse'
        type: array
      phone:
        type: string
    type: object
  model.VolunteerService:
    properties:
      days:
        items:
          $ref: '#/definitions/model.VolunteerServiceDay'
        type: array
      description:
        type: string
      email:
        type: string
      id:
        type: string
      organizer:
        type: string
      phone:
        type: string
      service_id:
        type: string
      user_id:
        type: string
    type: object
  model.VolunteerServiceDay:
    properties:
      date:
        type: string
      id:
        type: string
      notes:
        type: string
      user:
        $ref: '#/definitions/model.UserResponse'
    type: object
  model.VolunteerServiceDayRequest:
    properties:
      date:
        type: string
    type: object
  model.VolunteerServiceRequest:
    properties:
      days:
        items:
          $ref: '#/definitions/model.VolunteerServiceDayRequest'
        type: array
      description:
        type: string
      email:
        type: string
      id:
        type: string
      organizer:
        type: string
      phone:
        type: string
      service_id:
        type: string
      user_id:
        type: string
    type: object
  model.VolunteeredMeal:
    properties:
      created_on:
        type: string
      date:
        type: string
      description:
        type: string
      id:
        type: string
      notes:
        type: string
      updates:
        items:
          $ref: '#/definitions/model.MealUpdates'
        type: array
      user:
        $ref: '#/definitions/model.UserResponse'
    type: object
  model.VolunteeredMealRequest:
    properties:
      meal_id:
        type: string
      volunteered_meal:
        $ref: '#/definitions/model.VolunteeredMeal'
    type: object
host: services.momentumchurch.dev
info:
  contact:
    email: bandamwai@gmail.com
    name: Mwai Banda
  description: This is a backend service to process payments and provide some CRUD
    functionality
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://momentumindiana.org/statement-of-faith/
  title: Momentum API
  version: v1
paths:
  /api/v1/events:
    get:
      consumes:
      - application/json
      description: Used to get all events scheduled on the church calender
      parameters:
      - description: Provide a bearer token
        example: Bearer XXX-xxx-XXX-xxx-XX
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.EventReponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Get all Calender Events
      tags:
      - Events
  /api/v1/meals:
    get:
      consumes:
      - application/json
      description: Used to get all meals
      parameters:
      - description: Provide a bearer token
        example: Bearer XXX-xxx-XXX-xxx-XX
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.MealResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Get all Meals
      tags:
      - Meals
    post:
      consumes:
      - application/json
      description: Used to post a meal
      parameters:
      - description: Provide a bearer token
        example: Bearer XXX-xxx-XXX-xxx-XX
        in: header
        name: Authorization
        required: true
        type: string
      - description: Post a meal
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.MealRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MealResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Post a Meal
      tags:
      - Meals
    put:
      consumes:
      - application/json
      description: Update a meal
      parameters:
      - description: Provide a bearer token
        example: Bearer XXX-xxx-XXX-xxx-XX
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MealRequest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Update a meal
      tags:
      - Meals
  /api/v1/meals/{mealId}:
    delete:
      consumes:
      - application/json
      description: delete a meal by providing an Id
      parameters:
      - description: Provide a bearer token
        example: Bearer XXX-xxx-XXX-xxx-XX
        in: header
        name: Authorization
        required: true
        type: string
      - description: provide meal Id
        in: path
        name: mealId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MealResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Delete a meal
      tags:
      - Meals
  /api/v1/meals/meal:
    post:
      consumes:
      - application/json
      description: Used to post a meal participant
      parameters:
      - description: Provide a bearer token
        example: Bearer XXX-xxx-XXX-xxx-XX
        in: header
        name: Authorization
        required: true
        type: string
      - description: Post participant information
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.VolunteeredMealRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.VolunteeredMealRequest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Post a meal participant
      tags:
      - Meals
    put:
      consumes:
      - application/json
      description: Update a volunteered meal
      parameters:
      - description: Provide a bearer token
        example: Bearer XXX-xxx-XXX-xxx-XX
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.VolunteeredMeal'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Update a volunteered meal
      tags:
      - Meals
  /api/v1/messages:
    delete:
      consumes:
      - application/json
      description: Delete a message's information
      parameters:
      - description: Provide a bearer token
        example: Bearer XXX-xxx-XXX-xxx-XX
        in: header
        name: Authorization
        required: true
        type: string
      - description: Post a message
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.Message'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Delete message information
      tags:
      - Messages
    post:
      consumes:
      - application/json
      description: Used to post a message
      parameters:
      - description: Provide a bearer token
        example: Bearer XXX-xxx-XXX-xxx-XX
        in: header
        name: Authorization
        required: true
        type: string
      - description: Post a message
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.Message'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Post a Message
      tags:
      - Messages
    put:
      consumes:
      - application/json
      description: Used to update a message
      parameters:
      - description: Provide a bearer token
        example: Bearer XXX-xxx-XXX-xxx-XX
        in: header
        name: Authorization
        required: true
        type: string
      - description: Post a message
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.Message'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Update a Message
      tags:
      - Messages
  /api/v1/messages/{userId}:
    get:
      consumes:
      - application/json
      description: get a list of messages available for a user
      parameters:
      - description: Provide a bearer token
        example: Bearer XXX-xxx-XXX-xxx-XX
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.MessageResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Show a list of messages available for a user
      tags:
      - Messages
  /api/v1/messages/notes:
    post:
      consumes:
      - application/json
      description: Used to add user notes to a passage
      parameters:
      - description: Provide a bearer token
        example: Bearer XXX-xxx-XXX-xxx-XX
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.NoteRequest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Add a Note to a Passage
      tags:
      - Messages
    put:
      consumes:
      - application/json
      description: Used to update a user notes in a passage
      parameters:
      - description: Provide a bearer token
        example: Bearer XXX-xxx-XXX-xxx-XX
        in: header
        name: Authorization
        required: true
        type: string
      - description: Post a note
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.Message'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Note'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Update a Note in a Passage
      tags:
      - Messages
  /api/v1/messages/notes/{noteId}:
    delete:
      consumes:
      - application/json
      description: Delete a note's information by providing an Id
      parameters:
      - description: Provide a bearer token
        example: Bearer XXX-xxx-XXX-xxx-XX
        in: header
        name: Authorization
        required: true
        type: string
      - description: provide note Id
        in: path
        name: noteId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Note'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Delete note information by Id
      tags:
      - Messages
  /api/v1/messages/unpublished:
    get:
      consumes:
      - application/json
      description: get a list of unpublished messages available
      parameters:
      - description: Provide a bearer token
        example: Bearer XXX-xxx-XXX-xxx-XX
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.MessageResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Show a list of unpublished messages available
      tags:
      - Messages
  /api/v1/notifications:
    post:
      consumes:
      - application/json
      description: Used by clients to request a notification to be sent to a topiv
      parameters:
      - description: Provide a bearer token
        example: Bearer XXX-xxx-XXX-xxx-XX
        in: header
        name: Authorization
        required: true
        type: string
      - description: Post a notification
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.Notification'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Notification'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Post a notification
      tags:
      - Notifications
  /api/v1/payments:
    post:
      consumes:
      - application/json
      description: Used to initiate stripe transactions
      parameters:
      - description: Provide a bearer token
        example: Bearer XXX-xxx-XXX-xxx-XX
        in: header
        name: Authorization
        required: true
        type: string
      - description: Post a transaction
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.PaymentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.PaymentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Post a payment
      tags:
      - Payments
  /api/v1/sermons:
    get:
      consumes:
      - application/json
      description: get a list of sermons
      parameters:
      - description: Provide a bearer token
        example: Bearer XXX-xxx-XXX-xxx-XX
        in: header
        name: Authorization
        required: true
        type: string
      - description: Provide a page number
        in: query
        name: page
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.SermonResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Show a list of sermons
      tags:
      - Sermons
  /api/v1/services:
    get:
      consumes:
      - application/json
      description: get a list of volunteer services available
      parameters:
      - description: Provide a bearer token
        example: Bearer XXX-xxx-XXX-xxx-XX
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Service'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Show a list of volunteer services available
      tags:
      - Services
    post:
      consumes:
      - application/json
      description: Used to post a voluteer service
      parameters:
      - description: Provide a bearer token
        example: Bearer XXX-xxx-XXX-xxx-XX
        in: header
        name: Authorization
        required: true
        type: string
      - description: Post a meal
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.VolunteerServiceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MealResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Post a voluteer service
      tags:
      - Services
  /api/v1/services/{type}:
    get:
      consumes:
      - application/json
      description: delete a Service by providing an Type
      parameters:
      - description: Provide a bearer token
        example: Bearer XXX-xxx-XXX-xxx-XX
        in: header
        name: Authorization
        required: true
        type: string
      - description: provide service type
        in: path
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ServiceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Get Service By Type
      tags:
      - Services
  /api/v1/services/day:
    put:
      consumes:
      - application/json
      description: Update a volunteered service day
      parameters:
      - description: Provide a bearer token
        example: Bearer XXX-xxx-XXX-xxx-XX
        in: header
        name: Authorization
        required: true
        type: string
      - description: Post a day
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.VolunteerServiceDay'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.VolunteerServiceDay'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Update a volunteered service day
      tags:
      - Services
  /api/v1/transactions:
    get:
      consumes:
      - application/json
      description: get a list of all transactions
      parameters:
      - description: Provide a bearer token
        example: Bearer XXX-xxx-XXX-xxx-XX
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.TransactionResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Show a list of all transactions
      tags:
      - Transactions
    post:
      consumes:
      - application/json
      description: Used to post a transaction
      parameters:
      - description: Provide a bearer token
        example: Bearer XXX-xxx-XXX-xxx-XX
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.TransactionRequest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Post a transaction
      tags:
      - Transactions
  /api/v1/transactions/{transactionId}:
    delete:
      consumes:
      - application/json
      description: delete a transaction by providing an Id
      parameters:
      - description: Provide a bearer token
        example: Bearer XXX-xxx-XXX-xxx-XX
        in: header
        name: Authorization
        required: true
        type: string
      - description: provide transaction Id
        in: path
        name: transactionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.TransactionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Delete a transaction
      tags:
      - Transactions
  /api/v1/transactions/{userId}:
    get:
      consumes:
      - application/json
      description: get a list of transactions belonging to a user
      parameters:
      - description: Provide a bearer token
        example: Bearer XXX-xxx-XXX-xxx-XX
        in: header
        name: Authorization
        required: true
        type: string
      - description: provide user Id
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.TransactionResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Show a list of transactions belonging to a user
      tags:
      - Transactions
  /api/v1/users:
    post:
      consumes:
      - application/json
      description: Used to post a user
      parameters:
      - description: Provide a bearer token
        example: Bearer XXX-xxx-XXX-xxx-XX
        in: header
        name: Authorization
        required: true
        type: string
      - description: Post a user
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserRequest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Post a user
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Used to update a user
      parameters:
      - description: Provide a bearer token
        example: Bearer XXX-xxx-XXX-xxx-XX
        in: header
        name: Authorization
        required: true
        type: string
      - description: Post a user
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserRequest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Update a user
      tags:
      - Users
  /api/v1/users/{userId}:
    delete:
      consumes:
      - application/json
      description: Delete a user's information by providing an Id
      parameters:
      - description: Provide a bearer token
        example: Bearer XXX-xxx-XXX-xxx-XX
        in: header
        name: Authorization
        required: true
        type: string
      - description: provide user Id
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UserResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Delete user information by Id
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: get a user information by providing an Id
      parameters:
      - description: Provide a bearer token
        example: Bearer XXX-xxx-XXX-xxx-XX
        in: header
        name: Authorization
        required: true
        type: string
      - description: provide user Id
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UserResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Get user information by Id
      tags:
      - Users
swagger: "2.0"
